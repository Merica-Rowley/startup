const cookieParser = require('cookie-parser');
const bcrypt = require('bcrypt');
const express = require('express');
const app = express();
const DB = require('./database.js');
const { peerProxy } = require('./peerProxy.js');

const authCookieName = 'token';

// The service port. In production the frontend code is statically hosted by the service on the same port.
const port = process.argv.length > 2 ? process.argv[2] : 4000;

// JSON body parsing using built-in middleware
app.use(express.json());

// Use the cookie parser middleware for tracking authentication tokens
app.use(cookieParser());

// Serve up the frontend static content hosting
app.use(express.static('public'));

// Router for service endpoints
const apiRouter = express.Router();
app.use(`/api`, apiRouter);

// Create user
apiRouter.post('/create', async (req, res) => {
    if (await DB.getUser(req.body.username)) {
        res.status(409).send({ msg: 'This username is taken. Please choose another name.' });
    } else if (req.body.username.length == 0) {
        res.status(406).send({ msg: 'Please enter a valid username.' });
    } else if (req.body.password.length == 0) {
        res.status(406).send({ msg: 'Please enter a valid password.' });
    } else {
        const user = await DB.createUser(req.body.username, req.body.password);

        // Set the cookie
        setAuthCookie(res, user.token);

        res.send({
            // Note: the _id value seems like it is automatically generated by the MongoDB; appears to be unique to each item
            id: user._id
        });
    }
});

// Login user
apiRouter.post('/login', async (req, res) => {
    const user = await DB.getUser(req.body.username);
    if (user) {
        if (await bcrypt.compare(req.body.password, user.password)) {
            setAuthCookie(res, user.token);
            res.send({ id: user._id });
            return;
        }
    }
    res.status(401).send({ msg: 'Incorrect username or password. Please try again.' });
});

// Logout user
apiRouter.delete('/logout', async (req, res) => {
    res.clearCookie(authCookieName);
    res.status(204).end();
});

// Using secureApiRouter makes it so that scores can only be obained or submitted if a user is logged in
var secureApiRouter = express.Router();
apiRouter.use(secureApiRouter);

secureApiRouter.use(async (req, res, next) => {
    authToken = req.cookies[authCookieName];
    const user = await DB.getUserByToken(authToken);
    if (user) {
        next();
    } else {
        res.status(401).send({ msg: 'Unauthorized' });
    }
});

// Get Daily Scores
secureApiRouter.get('/scores/daily', async (_req, res) => {
    const dailyScores = await DB.getDailyScores();
    res.send(dailyScores);
});

// Get All Time Scores
secureApiRouter.get('/scores/allTime', async (_req, res) => {
    const allTimeScores = await DB.getAllTimeScores();
    res.send(allTimeScores);
});

// SubmitScore
secureApiRouter.post('/score', async (req, res) => {
    const newScore = {
        username: req.body.username,
        score: req.body.score
    }

    if (req.body.leaderboard === "dailyScores") {
        DB.addDailyScore(newScore);
        const dailyScores = await DB.getDailyScores();
        res.send(dailyScores);
    }
    else if (req.body.leaderboard === "allTimeScores") {
        DB.addAllTimeScore(newScore);
        const allTimeScores = await DB.getAllTimeScores();
        res.send(allTimeScores);
    }
});

// Default error handler
app.use(function (err, req, res, next) {
    res.status(500).send({ type: err.name, message: err.message });
});

// Return the application's default page if the path is unknown
app.use((_req, res) => {
    res.sendFile('index.html', { root: 'public' });
});

// setAuthCookie in the HTTP response
function setAuthCookie(res, authToken) {
    res.cookie(authCookieName, authToken, {
        secure: true,
        httpOnly: true,
        sameSite: 'strict',
    });
}

const httpConnection = app.listen(port, () => {
    console.log(`Listening on port ${port}`);
});

peerProxy(httpConnection);
